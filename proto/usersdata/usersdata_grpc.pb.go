// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: proto/usersdata.proto

package usersdatapb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	UsersData_GetComparable_FullMethodName = "/usersdata.UsersData/GetComparable"
	UsersData_GetAll_FullMethodName        = "/usersdata.UsersData/GetAll"
	UsersData_GetSlice_FullMethodName      = "/usersdata.UsersData/GetSlice"
	UsersData_UpdateSlice_FullMethodName   = "/usersdata.UsersData/UpdateSlice"
	UsersData_InsertSlice_FullMethodName   = "/usersdata.UsersData/InsertSlice"
)

// UsersDataClient is the client API for UsersData service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UsersDataClient interface {
	GetComparable(ctx context.Context, in *GetComparableRequest, opts ...grpc.CallOption) (*GetComparableResponse, error)
	GetAll(ctx context.Context, in *GetAllRequest, opts ...grpc.CallOption) (*GetAllResponse, error)
	GetSlice(ctx context.Context, in *GetSliceRequest, opts ...grpc.CallOption) (*GetSliceResponse, error)
	UpdateSlice(ctx context.Context, in *UpdateSliceRequest, opts ...grpc.CallOption) (*UpdateSliceResponse, error)
	InsertSlice(ctx context.Context, in *InsertSliceRequest, opts ...grpc.CallOption) (*InsertSliceResponse, error)
}

type usersDataClient struct {
	cc grpc.ClientConnInterface
}

func NewUsersDataClient(cc grpc.ClientConnInterface) UsersDataClient {
	return &usersDataClient{cc}
}

func (c *usersDataClient) GetComparable(ctx context.Context, in *GetComparableRequest, opts ...grpc.CallOption) (*GetComparableResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetComparableResponse)
	err := c.cc.Invoke(ctx, UsersData_GetComparable_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersDataClient) GetAll(ctx context.Context, in *GetAllRequest, opts ...grpc.CallOption) (*GetAllResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllResponse)
	err := c.cc.Invoke(ctx, UsersData_GetAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersDataClient) GetSlice(ctx context.Context, in *GetSliceRequest, opts ...grpc.CallOption) (*GetSliceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSliceResponse)
	err := c.cc.Invoke(ctx, UsersData_GetSlice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersDataClient) UpdateSlice(ctx context.Context, in *UpdateSliceRequest, opts ...grpc.CallOption) (*UpdateSliceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateSliceResponse)
	err := c.cc.Invoke(ctx, UsersData_UpdateSlice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersDataClient) InsertSlice(ctx context.Context, in *InsertSliceRequest, opts ...grpc.CallOption) (*InsertSliceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InsertSliceResponse)
	err := c.cc.Invoke(ctx, UsersData_InsertSlice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UsersDataServer is the server API for UsersData service.
// All implementations must embed UnimplementedUsersDataServer
// for forward compatibility.
type UsersDataServer interface {
	GetComparable(context.Context, *GetComparableRequest) (*GetComparableResponse, error)
	GetAll(context.Context, *GetAllRequest) (*GetAllResponse, error)
	GetSlice(context.Context, *GetSliceRequest) (*GetSliceResponse, error)
	UpdateSlice(context.Context, *UpdateSliceRequest) (*UpdateSliceResponse, error)
	InsertSlice(context.Context, *InsertSliceRequest) (*InsertSliceResponse, error)
	mustEmbedUnimplementedUsersDataServer()
}

// UnimplementedUsersDataServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUsersDataServer struct{}

func (UnimplementedUsersDataServer) GetComparable(context.Context, *GetComparableRequest) (*GetComparableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetComparable not implemented")
}
func (UnimplementedUsersDataServer) GetAll(context.Context, *GetAllRequest) (*GetAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedUsersDataServer) GetSlice(context.Context, *GetSliceRequest) (*GetSliceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSlice not implemented")
}
func (UnimplementedUsersDataServer) UpdateSlice(context.Context, *UpdateSliceRequest) (*UpdateSliceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSlice not implemented")
}
func (UnimplementedUsersDataServer) InsertSlice(context.Context, *InsertSliceRequest) (*InsertSliceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertSlice not implemented")
}
func (UnimplementedUsersDataServer) mustEmbedUnimplementedUsersDataServer() {}
func (UnimplementedUsersDataServer) testEmbeddedByValue()                   {}

// UnsafeUsersDataServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UsersDataServer will
// result in compilation errors.
type UnsafeUsersDataServer interface {
	mustEmbedUnimplementedUsersDataServer()
}

func RegisterUsersDataServer(s grpc.ServiceRegistrar, srv UsersDataServer) {
	// If the following call pancis, it indicates UnimplementedUsersDataServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&UsersData_ServiceDesc, srv)
}

func _UsersData_GetComparable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetComparableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersDataServer).GetComparable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsersData_GetComparable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersDataServer).GetComparable(ctx, req.(*GetComparableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersData_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersDataServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsersData_GetAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersDataServer).GetAll(ctx, req.(*GetAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersData_GetSlice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSliceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersDataServer).GetSlice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsersData_GetSlice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersDataServer).GetSlice(ctx, req.(*GetSliceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersData_UpdateSlice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSliceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersDataServer).UpdateSlice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsersData_UpdateSlice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersDataServer).UpdateSlice(ctx, req.(*UpdateSliceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersData_InsertSlice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertSliceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersDataServer).InsertSlice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsersData_InsertSlice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersDataServer).InsertSlice(ctx, req.(*InsertSliceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UsersData_ServiceDesc is the grpc.ServiceDesc for UsersData service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UsersData_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "usersdata.UsersData",
	HandlerType: (*UsersDataServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetComparable",
			Handler:    _UsersData_GetComparable_Handler,
		},
		{
			MethodName: "GetAll",
			Handler:    _UsersData_GetAll_Handler,
		},
		{
			MethodName: "GetSlice",
			Handler:    _UsersData_GetSlice_Handler,
		},
		{
			MethodName: "UpdateSlice",
			Handler:    _UsersData_UpdateSlice_Handler,
		},
		{
			MethodName: "InsertSlice",
			Handler:    _UsersData_InsertSlice_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/usersdata.proto",
}
